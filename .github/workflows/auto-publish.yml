name: Auto Publish to NPM

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CONFIGURATION.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need to fetch full history for version bumping
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint:check

      - name: Build package
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for version bump needed
        id: check-version
        run: |
          # Get recent commit messages (last 5 commits, excluding merges)
          COMMIT_MSGS=$(git log -5 --no-merges --pretty=format:"%s")
          echo "Recent commits (excluding merges):"
          echo "$COMMIT_MSGS"
          
          # Get the most recent non-merge commit
          LATEST_COMMIT=$(git log -1 --no-merges --pretty=format:"%s")
          echo "Latest non-merge commit: $LATEST_COMMIT"
          
          # Determine version bump type based on commit message
          # Check for breaking changes (major version)
          if [[ "$LATEST_COMMIT" =~ ^BREAKING[[:space:]:] ]] || \
             [[ "$LATEST_COMMIT" =~ !:[[:space:]] ]] || \
             [[ "$LATEST_COMMIT" =~ feat.*!.*: ]] || \
             [[ "$LATEST_COMMIT" =~ fix.*!.*: ]]; then
            echo "version_type=major" >> $GITHUB_OUTPUT
            echo "Version bump: major (breaking change detected)"
          # Check for features (minor version)
          elif [[ "$LATEST_COMMIT" =~ ^feat[[:space:]]*[:(] ]]; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump: minor (feature detected)"
          # Check for patches (patch version)
          elif [[ "$LATEST_COMMIT" =~ ^(fix|perf|refactor|style|test|docs|chore)[[:space:]]*[:(] ]]; then
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch (fix/improvement detected)"
          # Handle non-conventional commits
          elif [[ "$LATEST_COMMIT" =~ [Ff]ix|[Bb]ug|[Pp]atch ]]; then
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch (fix detected in message)"
          elif [[ "$LATEST_COMMIT" =~ [Ff]eature|[Aa]dd ]]; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump: minor (feature detected in message)"
          else
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch (default for: $LATEST_COMMIT)"
          fi

      - name: Bump version
        id: version-bump
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this is already a version bump commit
          if [[ "${{ github.event.head_commit.message }}" == *"bump version to"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]]; then
            echo "Skipping version bump - this appears to be an automated version commit"
            echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_number=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "skip_bump=true" >> $GITHUB_OUTPUT
          else
            # Bump the version
            echo "Bumping version using: ${{ steps.check-version.outputs.version_type }}"
            NEW_VERSION=$(npm version ${{ steps.check-version.outputs.version_type }} --no-git-tag-version)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION"
            
            # Extract version number without 'v' prefix for npm
            VERSION_NUMBER=${NEW_VERSION#v}
            echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
            echo "skip_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit version bump
        if: steps.version-bump.outputs.skip_bump != 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version-bump.outputs.new_version }} [skip ci]"
          git tag ${{ steps.version-bump.outputs.new_version }}

      - name: Push changes
        if: steps.version-bump.outputs.skip_bump != 'true'
        run: |
          git push origin main
          git push origin ${{ steps.version-bump.outputs.new_version }}

      - name: Check npm authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-bump.outputs.skip_bump != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version-bump.outputs.new_version }}
          release_name: Release ${{ steps.version-bump.outputs.new_version }}
          body: |
            ## Changes
            
            Automatically published from commit: ${{ github.sha }}
            
            ### Version Bump Type: ${{ steps.check-version.outputs.version_type }}
            
            **Commit Message:** ${{ github.event.head_commit.message }}
            
            ---
            
            This release was automatically generated by GitHub Actions.
            
            ### Installation
            ```bash
            npm install vue-json-miller-editor@${{ steps.version-bump.outputs.version_number }}
            ```
            
            ### What's Changed
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ steps.version-bump.outputs.new_version }}) for detailed changes.
          draft: false
          prerelease: false

      - name: Update README badges (if needed)
        run: |
          # Update npm version badge in README if it exists
          if grep -q "badge.fury.io/js/vue-json-edtr.svg" README.md; then
            echo "NPM badge found in README - it will auto-update"
          fi

      - name: Notify success
        run: |
          echo "‚úÖ Successfully published vue-json-miller-editor@${{ steps.version-bump.outputs.version_number }} to npm!"
          echo "üè∑Ô∏è Created release: ${{ steps.version-bump.outputs.new_version }}"
          echo "üì¶ NPM: https://www.npmjs.com/package/vue-json-miller-editor"
          echo "üöÄ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version-bump.outputs.new_version }}"